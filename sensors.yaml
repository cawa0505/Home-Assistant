#################################################################
## Sensors
#################################################################
  
  - platform: uptime

  - platform: pi_hole
    host: 192.168.86.95
    monitored_conditions:
      - ads_blocked_today
      - ads_percentage_today
      - dns_queries_today
      - domains_being_blocked
      - queries_cached
      - queries_forwarded
      - unique_clients
      - unique_domains

  - platform: nzbget
    host: 192.168.86.6
    username: !secret nzbget_username
    password: !secret nzbget_password
    monitored_variables:
      - article_cache
      - download_rate
      - download_paused
      - average_download_rate
      - free_disk_space
      - download_size
      - remaining_size
      - uptime

  - platform: huesensor
  #  ip_address: 192.168.86.46
   # token: !secret hue_api

  #- platform: metoffice
   # api_key: !secret metoffice_api
   # monitored_conditions:
   #   - weather
   #   - temperature
   #   - feels_like_temperature
    #  - wind_speed
    #  - wind_direction
    #  - wind_gust
    #  - visibility
    #  - visibility_distance
    #  - uv
    #  - precipitation
    #  - humidity

  - platform: moon

  - platform: google_wifi

  - platform: radarr
    host: 192.168.86.9
    port: 7878
    api_key: !secret radarr_api
    monitored_conditions:
      - upcoming
      - movies
      - status
    days: 2

  - platform: sonarr
    host: 192.168.86.9
    port: 8989
    api_key: !secret sonarr_api
    monitored_conditions:
      - upcoming
      - wanted
      - series
      - queue
    days: 2

# Sensor for monitoring the bridge state
  - platform: mqtt
    name: Zigbee2mqtt Bridge state
    state_topic: "zigbee2mqtt/bridge/state"
    icon: mdi:router-wireless

  - platform: template
    sensors:
      remote_front_room:
        friendly_name: 'Front Room Remote Sensor'
        value_template: '{{states.remote.front_room.attributes.current_activity}}' 

#################################################################
## Temperatures
#################################################################

  - platform: min_max
    name: Average House Temp
    type: mean
    entity_ids:
      - sensor.bathroom_sensor_temperature
      - sensor.dining_room_sensor_temperature
      - sensor.downstairs_sensor_temperature
      - sensor.downstairs_toilet_sensor_temperature
      - sensor.kitchen_sensor_temperature
      - sensor.upstairs_sensor_temperature
      - sensor.heating_thermostat_temperature
      - sensor.man_cave_temperature
      - sensor.living_room_temperature
      - sensor.bedroom_temperature
      - sensor.small_bedroom_temperature

  - platform: min_max
    name: Average Tado Temp
    type: mean
    entity_ids:
      - sensor.downstairs_temperature
      - sensor.kitchen_sensor_temperature
      - sensor.front_room_temperature
      - sensor.man_cave_temperature
      - sensor.nursery_temperature
      - sensor.upstairs_temperature
      - sensor.guest_room_temperature
      - sensor.average_tado_temp

# Nest Heating Status

 # - platform: template
  #  sensors:
    #  nest_heating:
       # friendly_name: "Nest Heating"   
      #  value_template: "{% if is_state('binary_sensor.home_away', 'off') %}on{% else %}off{% endif %}"

  - platform: template
    sensors:
      heating_min_temperature:
        value_template: '{{ states.climate.front_room.attributes.current_temperature }}'    

  - platform: template
    sensors:
      kitchen_target_temp:
        value_template: '{{ states.climate.kitchen.attributes.temperature }}'

  - platform: template
    sensors:
      heating_current_temperature:
        value_template: '{{ states.climate.heating.attributes.current_temperature }}'

  - platform: template
    sensors:
      heating_target_temperature:
        value_template: '{{ states.climate.heating.attributes.temperature }}'

  - platform: template
    sensors:
      tado_target_temperature:
        value_template: '{{ states.climate.front_room.attributes.temperature }}'           
   
  - platform: template
    sensors:
      heating_status:
        value_template: '{% if states("sensor.heating_current_temperature") | float > states("sensor.heating_target_temperature") | float %}off{% else %}on{% endif %}'

  - platform: template
    sensors:
      min_target:
        value_template: '{% if states("sensor.front_room_temperature") >= states("sensor.tado_target_temperature") %}true{% else %}false{% endif %}'

# Nest away status
  - platform: template
    sensors:
      away_mode:
        friendly_name: "Nest Location"
        value_template: "{% if is_state('binary_sensor.home_away', 'off') %}home{% else %}not_home{% endif %}"
 
#################################################################
## Batteries
#################################################################

  - platform: template
    sensors:
      motion_downstairs_battery:
        friendly_name: 'Motion Downstairs Battery'
        value_template: '{{states.binary_sensor.downstairs_motion_sensor.attributes.battery}}'
        unit_of_measurement: '%'
        device_class: battery

  - platform: template
    sensors:
      motion_bathroom_battery:
        friendly_name: 'Motion Bathroom Battery'
        value_template: '{{states.binary_sensor.bathroom_motion_sensor.attributes.battery}}'
        unit_of_measurement: '%'
        device_class: battery       

  - platform: template
    sensors:
      motion_upstairs_battery:
        friendly_name: 'Motion Upstairs Battery'
        value_template: '{{states.binary_sensor.upstairs_motion_sensor.attributes.battery}}'
        unit_of_measurement: '%'
        device_class: battery

  - platform: template
    sensors:
      motion_kitchen_battery:
        friendly_name: 'Motion Kitchen battery'
        value_template: '{{states.binary_sensor.kitchen_motion_sensor.attributes.battery}}'
        unit_of_measurement: '%'
        device_class: battery

  - platform: template
    sensors:
      motion_dining_room_battery:
        friendly_name: 'Motion Dining Room battery'
        value_template: '{{states.binary_sensor.dining_room_motion_sensor.attributes.battery}}'
        unit_of_measurement: '%'
        device_class: battery      

  - platform: template
    sensors:
      dining_room_switch_battery:
        friendly_name: 'Dining Room Switch battery'
        value_template: '{{states.sensor.dining_room_switch.attributes.battery}}'
        unit_of_measurement: '%'
        device_class: battery   

  - platform: template
    sensors:
      bathroom_room_switch_battery:
        friendly_name: 'Bathroom Switch battery'
        value_template: '{{states.sensor.bathroom_switch.attributes.battery}}'
        unit_of_measurement: '%'
        device_class: battery    

  - platform: template
    sensors:
      downstairs_toilet_switch_battery:
        friendly_name: 'Downstairs Toilet Switch battery'
        value_template: '{{states.sensor.downstairs_toilet_switch.attributes.battery}}'
        unit_of_measurement: '%'
        device_class: battery 

  - platform: template
    sensors:
      living_room_switch_battery:
        friendly_name: 'Living Room Switch battery'
        value_template: '{{states.sensor.living_room_switch.attributes.battery}}'
        unit_of_measurement: '%'
        device_class: battery     

  - platform: template
    sensors:
      guest_room_switch_battery:
        friendly_name: 'Guest Room Switch battery'
        value_template: '{{states.sensor.guest_room_switch.attributes.battery}}'
        unit_of_measurement: '%'
        device_class: battery      

#################################################################
## Google Home RSSI
#################################################################

 # - platform: template
  #  sensors:
  #    kitchen_chris_gh_rssi:
   #     value_template: '{{ states.device_tracker.chris_bt_kitchen.attributes.rssi }}'

 # - platform: template
 #   sensors:
 #     bedroom_chris_gh_rssi:
 #       value_template: '{{ states.device_tracker.chris_bt_bedroom.attributes.rssi }}'

 # - platform: template
   # sensors:
   #   guestroom_chris_gh_rssi:
    #    value_template: '{{ states.device_tracker.chris_bt_guestroom.attributes.rssi }}'

 # - platform: template
 #   sensors:
    #  mancave_chris_gh_rssi:
    #    value_template: '{{ states.device_tracker.chris_bt_mancave.attributes.rssi }}'

 # - platform: template
   # sensors:
   #   livingroom_chris_gh_rssi:
    #    value_template: '{{ states.device_tracker.chris_bt_livingroom.attributes.rssi }}'

 # - platform: template
  #  sensors:
  #    hallway_chris_gh_rssi:
   #     value_template: '{{ states.device_tracker.chris_bt_hallway.attributes.rssi }}'

#################################################################
## MISC
#################################################################
       

  - platform: template
    sensors:
      hpml10v2:
        value_template: '{% if is_state("device_tracker.hpml10v2", "home") %}Online{% else %}Offline{% endif %}'
        friendly_name: 'HP ML10v2'

  - platform: command_line
    name: CPU Temp
    command: "/bin/cat /sys/class/thermal/thermal_zone0/temp"
    unit_of_measurement: "ÂºC"
    value_template: '{{ value | multiply(0.001) }}'

  - platform: systemmonitor
    resources:
      - type: disk_use_percent
        arg: /
      - type: disk_use
        arg: /
      - type: disk_free
        arg: /
      - type: memory_free
      - type: memory_use_percent
      - type: processor_use
      - type: last_boot
      - type: load_1m      
      - type: load_5m
      - type: load_15m
     # - type: process
      - type: network_in
        arg: eth0
      - type: network_out
        arg: eth0    
      - type: memory_use
      - type: memory_free
      - type: swap_use_percent
      - type: swap_use
      - type: swap_free

###############################################################################
#  Sensor Definitions
###############################################################################
  - platform: time_date
    display_options:
      - time
      - date
      - date_time
      - time_date
      - time_utc

  - platform: mqtt
    state_topic: "/home/trashpickupday"
    name: "Trash Pickup Day"
    value_template: "{{ value }}"
    qos: 1  
  - platform: mqtt
    state_topic: "/home/recyclepickupday"
    name: "Recycle Pickup Day"
    value_template: "{{ value }}"
    qos: 1
  - platform: mqtt
    state_topic: "/home/recyclepickupweek"
    name: "Recycle Pickup Week"
    value_template: "{{ value }}"
    qos: 1

###############################################################################
# Sensor to hold info about current week is an odd week or an even week of the year
###############################################################################
  - platform: template
    sensors:
      current_week:
        value_template: >-
          {% set year = states.sensor.date_time.state.split(',')[0].split('-')[0] %}
          {% set month = states.sensor.date_time.state.split(',')[0].split('-')[1] %}
          {% set date = states.sensor.date_time.state.split(',')[0].split('-')[2] %}
          {% set today = strptime(year ~ '-' ~ month ~ '-' ~ date , '%Y-%m-%d') %}
          {%- if (as_timestamp(today) | timestamp_custom('%U', true) | int ) % 2 == 0 -%}
            Even Week (Week# {{ as_timestamp(today) | timestamp_custom('%U', true) }})
          {%- else -%}
            Odd Week (Week# {{ as_timestamp(today) | timestamp_custom('%U', true) }})
          {%- endif -%}
###############################################################################
# Trash  - Pickup schedule is EVERY week.
# Set the day to a day before the actual day leaving time for reminders
###############################################################################
  - platform: template
    sensors:
      trash_day:
        value_template: >-
          {% set year = states.sensor.date_time.state.split(',')[0].split('-')[0] %}
          {% set month = states.sensor.date_time.state.split(',')[0].split('-')[1] %}
          {% set date = states.sensor.date_time.state.split(',')[0].split('-')[2] %}
          {% set today = strptime(year ~ '-' ~ month ~ '-' ~ date , '%Y-%m-%d') %}
          {%- set pickupDay = states.sensor.trash_pickup_day.state | lower -%}      
          {%- if as_timestamp(today)| timestamp_custom('%A', true) | lower == pickupDay -%}
            yes
          {%- else -%}
            no
          {%- endif -%}
###############################################################################
# Recycle - Pickup schedule is every other week.
# Set the day to a day before the actual day leaving time for reminders
###############################################################################
  - platform: template
    sensors:
      recycle_day:
        value_template: >-
          {% set year = states.sensor.date_time.state.split(',')[0].split('-')[0] %}
          {% set month = states.sensor.date_time.state.split(',')[0].split('-')[1] %}
          {% set date = states.sensor.date_time.state.split(',')[0].split('-')[2] %}
          {% set today = strptime(year ~ '-' ~ month ~ '-' ~ date , '%Y-%m-%d') %}    
          {%- set pickupDay = states.sensor.recycle_pickup_day.state | lower -%}
          {% if states.input_select.recycle_pickup_week.state | lower == "even weeks" %}
            {%- set evenWeekPickup = "true" %}
          {% else %}
            {%- set evenWeekPickup = "false" %}
          {% endif %}
          {%- macro day_of_week(timestamp) -%}
            {{ as_timestamp(timestamp)| timestamp_custom('%A', true) | lower }}
          {%- endmacro %}      
          {%- macro week_number_of_year() -%}
            {{ as_timestamp(today) | timestamp_custom('%U', true) | int }}
          {%- endmacro %}
          {%- macro is_it_this_week() -%}
            {%- if as_timestamp(today) | timestamp_custom('%U', true) | int % 2 == 0 -%}
              {%- if evenWeekPickup == "true" -%}
                true
              {%- else -%}
                false
              {%- endif -%}
            {%- else -%}
              {%- if evenWeekPickup == "true" -%}
                false
              {%- else -%}
                true
              {%- endif -%}
            {%- endif -%}
          {%- endmacro -%}
          {%- macro is_it_today() -%}
          {%- if is_it_this_week() == "true" -%}
            {%- if day_of_week(today) | lower == pickupDay -%}
              yes
            {%- else -%}
              no
            {%- endif -%}
          {%- else -%}
            no
          {%- endif -%}
          {%- endmacro -%}
          {{- is_it_today() -}}